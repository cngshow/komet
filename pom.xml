<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
  <!-- in order to get the isaac yaml and the rails_common run this -->
  <!-- mvn clean initialize -->
  
	<parent>
		<groupId>gov.vha.isaac.ochre</groupId>
		<artifactId>isaac-parent</artifactId>
		<version>4.21-SNAPSHOT</version><!--TODO Eliminate Snapshot (and 3.12-snapshot goes to 3.11 for example) if present -->
	</parent>

	<groupId>gov.vha.isaac.gui.rails</groupId>
	<artifactId>rails_komet</artifactId>
	<version>4.23-SNAPSHOT</version> <!--TODO THIS IS THE ONLY PLACE SNAPSHOT CAN EXIST BEFORE MAKING A RELEASE!!-->
	<packaging>pom</packaging>

	<name>ISAAC Rails Komet Tooling</name>

	<description>
		This project is the Ruby on Rails web GUI for ISAAC 
	</description>

	<properties>
		<rails_common.version>1.77-SNAPSHOT</rails_common.version><!--TODO Put new rails common version here if it has been changed, move to non snapshot if releasing  -->
		<!--Open up the assembly.xml file in rails common if new directories are added. -->
		<isaac.version>${project.parent.version}</isaac.version>
		<!-- railsMode is automatically set to 'test' or 'production' - 'test' if the version number ends with '-SNAPSHOT'
		or 'production' otherwise.  See ant execution below-->
	</properties>

	<scm>
		<url>https://github.com/VA-CTT/rails_komet.git</url>
	</scm>

	<dependencies>
		<dependency>
			<groupId>org.jruby</groupId>
			<artifactId>jruby-complete</artifactId>
			<version>9.1.8.0</version>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>rake</artifactId>
			<version>12.0.0</version>
			<type>gem</type>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>bundler</artifactId>
			<version>1.11.2</version>
			<type>gem</type>
		</dependency>
		<dependency>
			<groupId>gov.vha.isaac.gui.rails</groupId>
			<artifactId>rails_common</artifactId>
			<version>${rails_common.version}</version>
			<type>zip</type>
		</dependency>
		<dependency>
			<groupId>gov.vha.isaac.ochre.modules</groupId>
			<artifactId>ochre-metadata</artifactId>
			<version>${isaac.version}</version>
			<type>yaml.zip</type>
		</dependency>
		<dependency>
			<groupId>gov.vha.isaac.ochre.modules</groupId>
			<artifactId>ochre-api</artifactId>
			<version>${isaac.version}</version>
			<type>jar</type>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Stomp any existing jar files in lib/jars to make sure an old version hanging around doesn't stomp us...-->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/lib/jars/</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</fileset>
						<fileset>	<!-- Stomp this file that seems to be created during builds-->
							<directory>${basedir}/db/data/</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</fileset>
						<!-- This really should be doing a stomp of rails_common as well, because the unpack, below, won't delete deleted files.
						But that breaks the way that Cris / Greg checkout the common project as a submodule... conditional stomp, perhaps? -->
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>validate</phase>
						<configuration>
							<exportAntProperties>true</exportAntProperties>
							<target>
								<property environment="env" />
								<available file="npm" filepath="${env.PATH}" property="npm.present" />
								<available file="yarn" filepath="${env.PATH}" property="yarn.present" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.4.1</version>
				<executions>
					<execution>
						<id>enforce-property</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireProperty>
									<property>npm.present</property>
									<message>You must have 'npm' on your path</message>
								</requireProperty>
								<requireProperty>
									<property>yarn.present</property>
									<message>"You must have 'yarn' on your path"</message>
								</requireProperty>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Extract the rails_common code into the correct place here, overwriting any existing version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>extract-rails_common</id>
						<phase>initialize</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<includeArtifactIds>rails_common</includeArtifactIds>
							<outputDirectory>${basedir}/lib/</outputDirectory>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
					<execution>
						<id>extract-yaml</id>
						<phase>initialize</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<includeArtifactIds>ochre-metadata</includeArtifactIds>
							<outputDirectory>${basedir}/config/generated/yaml</outputDirectory>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
					<execution>
						<id>place-jars</id>
						<phase>initialize</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- We really just want ochre-api, and the constants from ochre-metadata.  don't copy nested dependencies from ochre-metadata -->
							<includeArtifactIds>
								ochre-api, ochre-metadata
							</includeArtifactIds>
							<excludeTransitive>true</excludeTransitive>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<stripVersion>true</stripVersion>
							<outputDirectory>${basedir}/lib/jars/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<!-- metadata we want in the output package Gets picked up by warble.rb-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>write-pom-properties</id>
						<phase>validate</phase>
						<configuration>
							<target>
								<echoproperties destfile="${project.build.directory}/pom.properties" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.torquebox.mojo</groupId>
				<artifactId>jruby9-exec-maven-plugin</artifactId>
				<version>0.3.1</version>
				<executions>
					<execution>
						<id>bundle install</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<jrubyVerbose>true</jrubyVerbose>
							<jrubyJvmArgs>-Xmx4000m -Djava.awt.headless=true</jrubyJvmArgs>
							<command>bundle</command>
							<args>install</args>
						</configuration>
					</execution>
					
					<execution>
						<id>run tests</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<jrubyVerbose>true</jrubyVerbose>
							<jrubyJvmArgs>-Xmx4000m -Djava.awt.headless=true</jrubyJvmArgs>
							<command>rake</command>
							<args>devops:isaac_rest_test</args>
						</configuration>
					</execution>

					<execution>
						<id>react on rails</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<jrubyVerbose>true</jrubyVerbose>
							<jrubyJvmArgs>-Xmx4000m -Djava.awt.headless=true</jrubyJvmArgs>
							<execArgs>RAILS_ENV=${railsMode}</execArgs>
							<command>rake</command>
							<args>devops:set_up_react</args>
						</configuration>
					</execution>
					<!-- Build 1 instances of the war for now during SNAPSHOT, build 3 during release - one each with a relative path of _a, _b and _c, 
					  so we can deploy three times on the same server -->
					<execution>
						<id>build war a</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<jrubyVerbose>true</jrubyVerbose>
							<jrubyJvmArgs>-Xmx4000m -Djava.awt.headless=true</jrubyJvmArgs>
							<execArgs>RAILS_ENV=${railsMode} RAILS_RELATIVE_URL_ROOT=/rails_komet_a</execArgs>
							<command>rake</command>
							<args>devops:build_war</args>
						</configuration>
					</execution>
					<!-- wars b and c are only built during a release build.  When version is set to SNAPSHOT, we only create the a war -->
					<execution>
						<id>build war b</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<jrubyVerbose>true</jrubyVerbose>
							<jrubyJvmArgs>-Xmx4000m -Djava.awt.headless=true</jrubyJvmArgs>
							<execArgs>RAILS_ENV=${railsMode} RAILS_RELATIVE_URL_ROOT=/rails_komet_b</execArgs>
							<command>rake</command>
							<args>${warArguments}</args>  <!-- Hackery to noop, when doing a SNAPSHOT -->
						</configuration>
					</execution>
					<execution>
						<id>build war c</id>
						<phase>compile</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<jrubyVerbose>true</jrubyVerbose>
							<jrubyJvmArgs>-Xmx4000m -Djava.awt.headless=true</jrubyJvmArgs>
							<execArgs>RAILS_ENV=${railsMode} RAILS_RELATIVE_URL_ROOT=/rails_komet_c</execArgs>
							<command>rake</command>
							<args>${warArguments}</args> <!-- Hackery to noop, when doing a SNAPSHOT -->
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Set a variable for the rails runtime mode based on whether we are building SNAPSHOT or not -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>config</id>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<exportAntProperties>true</exportAntProperties>
							<target name="set-build-type">
								<condition property="railsMode" value="test" else="production">
									<matches string="${project.version}" pattern=".*-SNAPSHOT" />
								</condition>
								 <!-- If the version is SNAPSHOT - just build komet a - but setting our hack phase to a phase that we dont use. -->
								<condition property="warArguments" value="--version" else="devops:build_war">
									<matches string="${project.version}" pattern=".*-SNAPSHOT" />
								</condition>
								<condition property="warSkipAttachBC" value="true" else="false">
									<matches string="${project.version}" pattern=".*-SNAPSHOT" />
								</condition>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- Attach 1 or 3 wars -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-artifact-a</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/rails_komet_a.war</file>
									<classifier>a</classifier>
									<type>war</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
					<execution>
						<id>attach-artifacts-bc</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<skipAttach>${warSkipAttachBC}</skipAttach>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/rails_komet_b.war</file>
									<classifier>b</classifier>
									<type>war</type>
								</artifact>
								<artifact>
									<file>${project.build.directory}/rails_komet_c.war</file>
									<classifier>c</classifier>
									<type>war</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
