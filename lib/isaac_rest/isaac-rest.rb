#
#
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            module Concept

              # (no documentation provided)
              class RestConceptChronology

                # The data that was not expanded as part of this call (but can be)
                attr_accessor :expandables
                # The identifier data for the object
                attr_accessor :identifiers
                # The list of concept versions.  Depending on the expand parameter, may be empty, the latest only, or all versions.
                attr_accessor :versions
                # The &quot;best&quot; description for this concept.  This is selected based on the attributes within the session for
                # stamp and language coordinates - or - if none present - the server default.
                attr_accessor :description

                # the json hash for this RestConceptChronology
                def to_jaxb_json_hash
                  _h = {}
                  _h['expandables'] = expandables.to_jaxb_json_hash unless expandables.nil?
                  _h['identifiers'] = identifiers.to_jaxb_json_hash unless identifiers.nil?
                  if !versions.nil?
                    _ha = Array.new
                    versions.each { | _item | _ha.push _item.to_jaxb_json_hash }
                    _h['versions'] = _ha
                  end
                  _h['description'] = description.to_jaxb_json_hash unless description.nil?
                  return _h
                end

                # the json (string form) for this RestConceptChronology
                def to_json
                  to_jaxb_json_hash.to_json
                end

                #initializes this RestConceptChronology with a json hash
                def init_jaxb_json_hash(_o)
                  @expandables = Gov::Vha::Isaac::Rest::Api::Data::Expandables.from_json(_o['expandables']) unless _o['expandables'].nil?
                  @identifiers = Gov::Vha::Isaac::Rest::Api1::Data::RestIdentifiedObject.from_json(_o['identifiers']) unless _o['identifiers'].nil?
                  if !_o['versions'].nil?
                    @versions = Array.new
                    _oa = _o['versions']
                    _oa.each { | _item | @versions.push Gov::Vha::Isaac::Rest::Api1::Data::Concept::RestConceptVersion.from_json(_item) }
                  end
                  @description = String.from_json(_o['description']) unless _o['description'].nil?
                end

                # constructs a RestConceptChronology from a (parsed) JSON hash
                def self.from_json(o)
                  if o.nil?
                    return nil
                  else
                    inst = new
                    inst.init_jaxb_json_hash o
                    return inst
                  end
                end
              end

            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            module Search

              # (no documentation provided)
              class RestSearchResult

                # The internal identifier of the sememe that matched the query
                attr_accessor :matchNid
                # The text of the description that matched the query (may be blank, if the description is not available/active on the path used to populate this)
                attr_accessor :matchText
                # The Lucene Score for this result.  This value is only useful for ranking search results relative to other search results within the SAME QUERY
                # execution.  It may not be used to rank one query against another.
                attr_accessor :score

                # the json hash for this RestSearchResult
                def to_jaxb_json_hash
                  _h = {}
                  _h['matchNid'] = matchNid.to_jaxb_json_hash unless matchNid.nil?
                  _h['matchText'] = matchText.to_jaxb_json_hash unless matchText.nil?
                  _h['score'] = score.to_jaxb_json_hash unless score.nil?
                  return _h
                end

                # the json (string form) for this RestSearchResult
                def to_json
                  to_jaxb_json_hash.to_json
                end

                #initializes this RestSearchResult with a json hash
                def init_jaxb_json_hash(_o)
                  @matchNid = Fixnum.from_json(_o['matchNid']) unless _o['matchNid'].nil?
                  @matchText = String.from_json(_o['matchText']) unless _o['matchText'].nil?
                  @score = Float.from_json(_o['score']) unless _o['score'].nil?
                end

                # constructs a RestSearchResult from a (parsed) JSON hash
                def self.from_json(o)
                  if o.nil?
                    return nil
                  else
                    inst = new
                    inst.init_jaxb_json_hash o
                    return inst
                  end
                end
              end

            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            module Sememe

              # (no documentation provided)
              class RestSememeChronology

                # (no documentation provided)
                attr_accessor :sememeSequence
                # (no documentation provided)
                attr_accessor :assemblageSequence
                # (no documentation provided)
                attr_accessor :referencedComponentNid
                # (no documentation provided)
                attr_accessor :identifiers

                # the json hash for this RestSememeChronology
                def to_jaxb_json_hash
                  _h = {}
                  _h['sememeSequence'] = sememeSequence.to_jaxb_json_hash unless sememeSequence.nil?
                  _h['assemblageSequence'] = assemblageSequence.to_jaxb_json_hash unless assemblageSequence.nil?
                  _h['referencedComponentNid'] = referencedComponentNid.to_jaxb_json_hash unless referencedComponentNid.nil?
                  _h['identifiers'] = identifiers.to_jaxb_json_hash unless identifiers.nil?
                  return _h
                end

                # the json (string form) for this RestSememeChronology
                def to_json
                  to_jaxb_json_hash.to_json
                end

                #initializes this RestSememeChronology with a json hash
                def init_jaxb_json_hash(_o)
                  @sememeSequence = Fixnum.from_json(_o['sememeSequence']) unless _o['sememeSequence'].nil?
                  @assemblageSequence = Fixnum.from_json(_o['assemblageSequence']) unless _o['assemblageSequence'].nil?
                  @referencedComponentNid = Fixnum.from_json(_o['referencedComponentNid']) unless _o['referencedComponentNid'].nil?
                  @identifiers = Gov::Vha::Isaac::Rest::Api1::Data::RestIdentifiedObject.from_json(_o['identifiers']) unless _o['identifiers'].nil?
                end

                # constructs a RestSememeChronology from a (parsed) JSON hash
                def self.from_json(o)
                  if o.nil?
                    return nil
                  else
                    inst = new
                    inst.init_jaxb_json_hash o
                    return inst
                  end
                end
              end

            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            # (no documentation provided)
            class RestIdentifiedObject

              # The globally unique, fixed, stable set of identifiers for the object
              attr_accessor :uuids

              # the json hash for this RestIdentifiedObject
              def to_jaxb_json_hash
                _h = {}
                if !uuids.nil?
                  _ha = Array.new
                  uuids.each { | _item | _ha.push _item.to_jaxb_json_hash }
                  _h['uuids'] = _ha
                end
                return _h
              end

              # the json (string form) for this RestIdentifiedObject
              def to_json
                to_jaxb_json_hash.to_json
              end

              #initializes this RestIdentifiedObject with a json hash
              def init_jaxb_json_hash(_o)
                if !_o['uuids'].nil?
                  @uuids = Array.new
                  _oa = _o['uuids']
                  _oa.each { | _item | @uuids.push String.from_json(_item) }
                end
              end

              # constructs a RestIdentifiedObject from a (parsed) JSON hash
              def self.from_json(o)
                if o.nil?
                  return nil
                else
                  inst = new
                  inst.init_jaxb_json_hash o
                  return inst
                end
              end
            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            module Concept

              # (no documentation provided)
              class RestConceptVersion

                # The data that was not expanded as part of this call (but can be)
                attr_accessor :expandables
                # The concept chronology for this concept.  Depending on the expand paramter, may be empty.
                attr_accessor :conChronology
                # The StampedVersion details for this version of this concept.
                attr_accessor :conVersion
                # The parent concepts(s) of the concept at this point in time (is a relationships)
                attr_accessor :parents
                # The child concepts(s) of the concept at this point in time (is a relationships)
                attr_accessor :children

                # the json hash for this RestConceptVersion
                def to_jaxb_json_hash
                  _h = {}
                  _h['expandables'] = expandables.to_jaxb_json_hash unless expandables.nil?
                  _h['conChronology'] = conChronology.to_jaxb_json_hash unless conChronology.nil?
                  _h['conVersion'] = conVersion.to_jaxb_json_hash unless conVersion.nil?
                  if !parents.nil?
                    _ha = Array.new
                    parents.each { | _item | _ha.push _item.to_jaxb_json_hash }
                    _h['parents'] = _ha
                  end
                  if !children.nil?
                    _ha = Array.new
                    children.each { | _item | _ha.push _item.to_jaxb_json_hash }
                    _h['children'] = _ha
                  end
                  return _h
                end

                # the json (string form) for this RestConceptVersion
                def to_json
                  to_jaxb_json_hash.to_json
                end

                #initializes this RestConceptVersion with a json hash
                def init_jaxb_json_hash(_o)
                  @expandables = Gov::Vha::Isaac::Rest::Api::Data::Expandables.from_json(_o['expandables']) unless _o['expandables'].nil?
                  @conChronology = Gov::Vha::Isaac::Rest::Api1::Data::Concept::RestConceptChronology.from_json(_o['conChronology']) unless _o['conChronology'].nil?
                  @conVersion = Gov::Vha::Isaac::Rest::Api1::Data::RestStampedVersion.from_json(_o['conVersion']) unless _o['conVersion'].nil?
                  if !_o['parents'].nil?
                    @parents = Array.new
                    _oa = _o['parents']
                    _oa.each { | _item | @parents.push Gov::Vha::Isaac::Rest::Api1::Data::Concept::RestConceptVersion.from_json(_item) }
                  end
                  if !_o['children'].nil?
                    @children = Array.new
                    _oa = _o['children']
                    _oa.each { | _item | @children.push Gov::Vha::Isaac::Rest::Api1::Data::Concept::RestConceptVersion.from_json(_item) }
                  end
                end

                # constructs a RestConceptVersion from a (parsed) JSON hash
                def self.from_json(o)
                  if o.nil?
                    return nil
                  else
                    inst = new
                    inst.init_jaxb_json_hash o
                    return inst
                  end
                end
              end

            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            module Sememe

              # (no documentation provided)
              class RestSememeVersion

                # (no documentation provided)
                attr_accessor :sememeChronology
                # (no documentation provided)
                attr_accessor :sememeVersion

                # the json hash for this RestSememeVersion
                def to_jaxb_json_hash
                  _h = {}
                  _h['sememeChronology'] = sememeChronology.to_jaxb_json_hash unless sememeChronology.nil?
                  _h['sememeVersion'] = sememeVersion.to_jaxb_json_hash unless sememeVersion.nil?
                  return _h
                end

                # the json (string form) for this RestSememeVersion
                def to_json
                  to_jaxb_json_hash.to_json
                end

                #initializes this RestSememeVersion with a json hash
                def init_jaxb_json_hash(_o)
                  @sememeChronology = Gov::Vha::Isaac::Rest::Api1::Data::Sememe::RestSememeChronology.from_json(_o['sememeChronology']) unless _o['sememeChronology'].nil?
                  @sememeVersion = Gov::Vha::Isaac::Rest::Api1::Data::RestStampedVersion.from_json(_o['sememeVersion']) unless _o['sememeVersion'].nil?
                end

                # constructs a RestSememeVersion from a (parsed) JSON hash
                def self.from_json(o)
                  if o.nil?
                    return nil
                  else
                    inst = new
                    inst.init_jaxb_json_hash o
                    return inst
                  end
                end
              end

            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api

          module Data

            # (no documentation provided)
            class Expandables

              # The list of data types that were not expanded on this request that could be expanded directly, or can
              # be expanded with a second trip by calling the provided URL
              attr_accessor :items

              # the json hash for this Expandables
              def to_jaxb_json_hash
                _h = {}
                if !items.nil?
                  _ha = Array.new
                  items.each { | _item | _ha.push _item.to_jaxb_json_hash }
                  _h['items'] = _ha
                end
                return _h
              end

              # the json (string form) for this Expandables
              def to_json
                to_jaxb_json_hash.to_json
              end

              #initializes this Expandables with a json hash
              def init_jaxb_json_hash(_o)
                if !_o['items'].nil?
                  @items = Array.new
                  _oa = _o['items']
                  _oa.each { | _item | @items.push Gov::Vha::Isaac::Rest::Api::Data::Expandable.from_json(_item) }
                end
              end

              # constructs a Expandables from a (parsed) JSON hash
              def self.from_json(o)
                if o.nil?
                  return nil
                else
                  inst = new
                  inst.init_jaxb_json_hash o
                  return inst
                end
              end
            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api

          module Data

            # (no documentation provided)
            class Expandable

              # The name of the item that is expandable (pass this to have this value expanded directly by the call that produced this)
              attr_accessor :name
              # The url to call to get the expanded item separately
              attr_accessor :url

              # the json hash for this Expandable
              def to_jaxb_json_hash
                _h = {}
                _h['name'] = name.to_jaxb_json_hash unless name.nil?
                _h['url'] = url.to_jaxb_json_hash unless url.nil?
                return _h
              end

              # the json (string form) for this Expandable
              def to_json
                to_jaxb_json_hash.to_json
              end

              #initializes this Expandable with a json hash
              def init_jaxb_json_hash(_o)
                @name = String.from_json(_o['name']) unless _o['name'].nil?
                @url = String.from_json(_o['url']) unless _o['url'].nil?
              end

              # constructs a Expandable from a (parsed) JSON hash
              def self.from_json(o)
                if o.nil?
                  return nil
                else
                  inst = new
                  inst.init_jaxb_json_hash o
                  return inst
                end
              end
            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            # (no documentation provided)
            class RestStampedVersion

              # The stamp sequence of this version
              attr_accessor :stampSequence
              # The State of this version (active, inactive, primordial or cancelled)
              attr_accessor :state
              # The time stamp of this version (in standard java form)
              attr_accessor :time
              # The concept sequence of the concept that identifies the author of this version
              attr_accessor :authorSequence
              # The concept sequence of the module that this version is in
              attr_accessor :moduleSequence
              # The concept sequence of the path that this version is in
              attr_accessor :pathSequence

              # the json hash for this RestStampedVersion
              def to_jaxb_json_hash
                _h = {}
                _h['stampSequence'] = stampSequence.to_jaxb_json_hash unless stampSequence.nil?
                _h['state'] = state.to_jaxb_json_hash unless state.nil?
                _h['time'] = time.to_jaxb_json_hash unless time.nil?
                _h['authorSequence'] = authorSequence.to_jaxb_json_hash unless authorSequence.nil?
                _h['moduleSequence'] = moduleSequence.to_jaxb_json_hash unless moduleSequence.nil?
                _h['pathSequence'] = pathSequence.to_jaxb_json_hash unless pathSequence.nil?
                return _h
              end

              # the json (string form) for this RestStampedVersion
              def to_json
                to_jaxb_json_hash.to_json
              end

              #initializes this RestStampedVersion with a json hash
              def init_jaxb_json_hash(_o)
                @stampSequence = Fixnum.from_json(_o['stampSequence']) unless _o['stampSequence'].nil?
                @state = String.from_json(_o['state']) unless _o['state'].nil?
                @time = Bignum.from_json(_o['time']) unless _o['time'].nil?
                @authorSequence = Fixnum.from_json(_o['authorSequence']) unless _o['authorSequence'].nil?
                @moduleSequence = Fixnum.from_json(_o['moduleSequence']) unless _o['moduleSequence'].nil?
                @pathSequence = Fixnum.from_json(_o['pathSequence']) unless _o['pathSequence'].nil?
              end

              # constructs a RestStampedVersion from a (parsed) JSON hash
              def self.from_json(o)
                if o.nil?
                  return nil
                else
                  inst = new
                  inst.init_jaxb_json_hash o
                  return inst
                end
              end
            end

          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Ochre

        module Api

          # (no documentation provided)
          class State

            #
            INACTIVE = "INACTIVE"

            #
            ACTIVE = "ACTIVE"

            #
            PRIMORDIAL = "PRIMORDIAL"

            #
            CANCELED = "CANCELED"
          end

        end

      end

    end

  end

end

module Gov

  module Vha

    module Isaac

      module Rest

        module Api1

          module Data

            module Sememe

              # (no documentation provided)
              class RestSememeDescriptionVersion < Gov::Vha::Isaac::Rest::Api1::Data::Sememe::RestSememeVersion

                # (no documentation provided)
                attr_accessor :caseSignificanceConceptSequence
                # (no documentation provided)
                attr_accessor :languageConceptSequence
                # (no documentation provided)
                attr_accessor :text
                # (no documentation provided)
                attr_accessor :descriptionTypeConceptSequence

                # the json hash for this RestSememeDescriptionVersion
                def to_jaxb_json_hash
                  _h = super
                  _h['caseSignificanceConceptSequence'] = caseSignificanceConceptSequence.to_jaxb_json_hash unless caseSignificanceConceptSequence.nil?
                  _h['languageConceptSequence'] = languageConceptSequence.to_jaxb_json_hash unless languageConceptSequence.nil?
                  _h['text'] = text.to_jaxb_json_hash unless text.nil?
                  _h['descriptionTypeConceptSequence'] = descriptionTypeConceptSequence.to_jaxb_json_hash unless descriptionTypeConceptSequence.nil?
                  return _h
                end

                #initializes this RestSememeDescriptionVersion with a json hash
                def init_jaxb_json_hash(_o)
                  super _o
                  @caseSignificanceConceptSequence = Fixnum.from_json(_o['caseSignificanceConceptSequence']) unless _o['caseSignificanceConceptSequence'].nil?
                  @languageConceptSequence = Fixnum.from_json(_o['languageConceptSequence']) unless _o['languageConceptSequence'].nil?
                  @text = String.from_json(_o['text']) unless _o['text'].nil?
                  @descriptionTypeConceptSequence = Fixnum.from_json(_o['descriptionTypeConceptSequence']) unless _o['descriptionTypeConceptSequence'].nil?
                end

                # constructs a RestSememeDescriptionVersion from a (parsed) JSON hash
                def self.from_json(o)
                  if o.nil?
                    return nil
                  else
                    inst = new
                    inst.init_jaxb_json_hash o
                    return inst
                  end
                end
              end

            end

          end

        end

      end

    end

  end

end