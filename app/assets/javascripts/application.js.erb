/*
 Copyright Notice

 This is a work of the U.S. Government and is not subject to copyright
 protection in the United States. Foreign copyrights may apply.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require webpack-bundle
//= require jquery2
//= require jquery_ujs
//= require jquery-ui
//= require moment
//= require bootstrap-datetimepicker
// = require ag-grid.min.js
//= require jquery.enhsplitter
//= require jquery.minicolors
//= require jquery.contextMenu.min.js
//= require jquery-validation/jquery.validate.min
//= require_tree ../../../vendor/assets/javascripts/jquery-svg
//= require_tree ../../../vendor/assets/javascripts/jsTree
//= require_tree ../../../vendor/assets/javascripts/jquery-tiny-pubsub
//= require jquery.fileDownload
//= require bootstrap
//= require turbolinks
//ensure everything in the util directory is loaded before our other javascript
//= require util/common
//= require util/channels
//= require util/svg_helper.js
// require util/ajax_cache.js
// Can also do this as long as we have no load order dependencies in the util directory (Currently we do not)
// require_tree ./util

// this is for ajax_flash notifications
//= require bootstrap-notify
//= require_tree .


function flash_notify(options, settings) {
    $.notify(options, settings);
}

(function () {
    $.ajaxSetup({ cache: false });

    // read ajax response header for roles to compare against the roles in gon to see if they have been changed in PRISME
    var time_between_role_notifications = <%=$PROPS['KOMET.role_change_notification_time_interval']%>;
    var last_notification_time = null;

    $(document).ajaxComplete(function (event, jqXHR, ajaxOptions) {
        var responseRoles = jqXHR.getResponseHeader('<%= BootstrapNotifier::AJAX_HDR_ROLES %>');
        var roles = JSON.parse(responseRoles);

        if (roles != null && Common.arr_diff(gon.roles, roles).length != 0) {
            var secs_bt_notifications = (new Date() - last_notification_time) / 1000;
            var show_flash = (time_between_role_notifications === null ? true : secs_bt_notifications > time_between_role_notifications);

            if (show_flash) {
                flash_notify({message: '<%=BootstrapNotifier::ROLE_CHANGE%>'}, {
                    type: 'danger',
                    delay: 0
                });
                last_notification_time = new Date();
            }
        }
    });
})();

// When any ajax request is made this code will run allowing you to always run code at the start and end of the request.
// Currently used to change the cursor
//(function() {
//
//    // make a copy of the original XMLHttpRequest open function
//    var originalOpenFunction = XMLHttpRequest.prototype.open;
//
//    // create our own XMLHttpRequest open function
//    XMLHttpRequest.prototype.open = function() {
//
//        console.log('request started!');
//        // change the cursor to a wait icon
//        Common.cursor_wait();
//
//        // add a listener to the loadend event so our code will run no matter the state of the request when it closes. Use 'load' event if you only want requests that complete successfully
//        this.addEventListener('loadend', function() {
//
//            // change the cursor to a normal icon
//            Common.cursor_auto();
//            console.log('request ended!');
//
//            // did the request complete successfully
//            console.log(this.readyState);
//
//            // the response
//            //console.log(this.responseText);
//        });
//
//        originalOpenFunction.apply(this, arguments);
//    };
//})();

//** javascript plugin overrides

// turn off the autofocus feature of Jquery UI dialogs
//$.ui.dialog.prototype._focusTabbable = $.noop;

//** javascript polyfills to make sure code works in all browsers, regardless of current support level

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        'use strict';
        if (this == null) {
            throw new TypeError('Array.prototype.findIndex called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}

function getEvent(e){
    return (e || window.event);
};
function getKeyCode(e) {
    return (e.keyCode ? e.keyCode : e.which);
};
