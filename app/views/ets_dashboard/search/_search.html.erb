<%= form_tag('/search', method: 'get') do %>

    <div class="ets-floated-bar">
      <%= label_tag :search_text, 'Search Text:' %>
      <%= text_field_tag (:taxonomy_search_text) %>

      <div class="pull-right">
        <button type="button" class="btn btn-primary" onclick="loadResultGrid()">Search</button>
      </div>

    </div>

    <div id="search_options_pane">

      <h3>Advanced Options</h3>

      <div class="ets-accordion-panel">

        <div class="ets-floated-bar">
          <%= label_tag :taxonomy_search_type, 'Search In:' %>
          <%= select_tag :taxonomy_search_type, options_for_select([['Descriptions', 'descriptions'], ['Sememes', 'sememes']], 'descriptions'), :onchange => 'taxonomyChangeSearchType(this)' %>

          <div class="pull-right">
            <%= label_tag :taxonomy_search_limit, 'Limit:' %>
            <%= select_tag :taxonomy_search_limit, options_for_select([['100'], ['500'], ['1000'], ['10000']], '100')  %>
          </div>
        </div>

        <div id="taxonomy_search_option_description_type_fields">
          <%= label_tag :taxonomy_search_description_type, 'Description Type:' %>
          <%= select_tag :taxonomy_search_description_type, options_for_select([['Fully Specified Name', 'fsn'], ['Synonym', 'synonym'], ['Definition', 'definition']], 'fsn') %>
        </div>

        <span id="taxonomy_search_sememe_fields">

          <div>
            <%= label_tag :taxonomy_search_treat_as_string, 'Treat Search Text as String:' %>
            <%= select_tag :taxonomy_search_treat_as_string, options_for_select([['True', 'true'], ['False','false']], 'false')  %>
          </div>

          <input id="taxonomy_search_assemblage_id" class="hide" />

          <%= label_tag :taxonomy_search_assemblage, 'Search Assemblage:' %>
          <div id="taxonomy_search_assemblage_fields" class="input-group">

            <input id="taxonomy_search_assemblage_display" class="form-control" />

            <div class="input-group-btn ets-search-combo-field">

              <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="caret"></span>
              </button>

              <ul id="taxonomy_search_assemblage_recents" class="dropdown-menu dropdown-menu-right">
              </ul>

            </div><!-- /btn-group -->

          </div><!-- /input-group -->

        </span>

      </div>

    </div>


<% end %>

<br>

<div id="taxonomy_search_results" style="height: 450px;" class="ag-fresh"></div>

<script>

  var newSearch = true;
  var gridOptions;

  $(document).ready(function () {

    // setup the advanced search options accordion
    $("#search_options_pane").accordion({
      collapsible: true,
      active: true,
      heightStyle: "content",
      animate: false
    });

    // setup the assemblage field autocomplete functionality
    $("#taxonomy_search_assemblage_display").autocomplete({
      source: gon.routes.search_get_assemblage_suggestions_path,
      minLength: 3,
      select: onAssemblageSuggestionSelection,
      change: onAssemblageSuggestionChange
    });

    // load any previous assemblage queries into a menu for the user to select from
    //loadAssemblageRecents();
  });

  function loadResultGrid() {

    newSearch = true;

    // If a grid already exists destroy it or it will create a second grid
    if (gridOptions){
      gridOptions.api.destroy();
    }

    // set the options for the result grid
    gridOptions = {
      enableColResize: true,
      suppressCellSelection: true,
      rowSelection: "single",
      onSelectionChanged: onGridSelection,
      onGridReady: onGridReady,
      columnDefs:  [
        {field: "id", headerName: 'ID', hide: 'true'},
        {field: "matching_terms", headerName: "Matching Terms"},
        {field: "concept_status", headerName: "Status"},
        {field: "match_score", headerName: "Score", suppressSizeToFit: "false", hide: 'true'}
      ]
    };

    new agGrid.Grid($("#taxonomy_search_results").get(0), gridOptions);

    getResultData();

    newSearch = false;
  }

  function getResultData(){

    // load the parameters from the form to add to the query string sent in the ajax data call
    //var searchParams = "?taxonomy_search_text=f*&taxonomy_search_type=sememes&taxonomy_search_treat_as_string=false&taxonomy_search_description_type=fsn&newSearch=true";
    var searchParams = "?taxonomy_search_text=" + $("#taxonomy_search_text").val() + "&taxonomy_search_limit=" + $("#taxonomy_search_limit").val()
                      + "&taxonomy_search_type=" + $("#taxonomy_search_type").val() + "&new_search=" + newSearch;

    // set only the parameters needed based on the search type
    if ($("#taxonomy_search_type").val() === "descriptions"){
      console.log("descript");
      searchParams += "&taxonomy_search_description_type=" + $("#taxonomy_search_description_type").val();
    }
    else {
      console.log("sememes");
      searchParams += "&taxonomy_search_treat_as_string=" + $("#taxonomy_search_treat_as_string").val() + "&taxonomy_search_assemblage_id=" + $("#taxonomy_search_assemblage_id").val()
                    + "&taxonomy_search_assemblage_display=" + $("#taxonomy_search_assemblage_display").val();
    }

    // make an ajax call to get the data
    $.get( gon.routes.search_get_search_results_path + searchParams, function( data ) {

      // set the grid datasource options, including processing the data rows
      var dataSource = {

        rowCount: data.length,
        pageSize: 15,
        getRows: function (params) {

          console.log('asking for ' + params.startRow + ' to ' + params.endRow);

          var rowsThisPage = data.slice(params.startRow, params.endRow);
          var lastRow = -1;

          params.successCallback(rowsThisPage);
        }
      };

      gridOptions.api.setDatasource(dataSource);

      // reload the recents menu
      loadAssemblageRecents();
    });
  }

  function onGridSelection(){

    var selectedRows = gridOptions.api.getSelectedRows();

    selectedRows.forEach( function(selectedRow, index) {

      console.log('Row with ID ' + selectedRow.id + ' ' + selectedRow.concept_status + '.');
      $.publish(EtsChannels.Taxonomy.taxonomySearchResultSelectedChannel, selectedRow.id);
    });
  }

  function onGridReady(event){
    event.api.sizeColumnsToFit();
  }

  function taxonomyChangeSearchType(field){

    /* not sure if we want to clear the values when the user switches types
    if (field.value === "descriptions"){

      $("#taxonomy_search_assemblage_id").val("");
      $("#taxonomy_search_assemblage_disply").val("");
      $("#taxonomy_search_treat_as_string").val("false");
    }
    else {
      $("#taxonomy_search_description_type").val("");
    }
    */

    $("#taxonomy_search_option_description_type_fields").toggle();
    $("#taxonomy_search_sememe_fields").toggle();
  }

  function onAssemblageSuggestionSelection(event, ui){

    $("#taxonomy_search_assemblage_display").val(ui.item.label);
    $("#taxonomy_search_assemblage_id").val(ui.item.value);
    return false;
  }

  function onAssemblageSuggestionChange(event, ui){

    if (!ui.item){
      event.target.value = "";
      $("#taxonomy_search_assemblage_id").val("");
    }
  }

  function loadAssemblageRecents() {

    $.get(gon.routes.search_get_assemblage_recents_path, function (data) {

      var options = "";

      $.each(data, function (index, value) {

        // use the html function to escape any html that may have been entered by the user
        var valueText = $("<li>").text(value.text).html();
        options += "<li><a href=\"#\" onclick=\"useAssemblageRecent('" + value.id + "', '" + valueText + "')\">" + valueText + "</a></li>";
      });

      $("#taxonomy_search_assemblage_recents").html(options);
    });
  }

  function useAssemblageRecent(id, text){

    $("#taxonomy_search_assemblage_display").val(text);
    $("#taxonomy_search_assemblage_id").val(id);
  }
</script>
